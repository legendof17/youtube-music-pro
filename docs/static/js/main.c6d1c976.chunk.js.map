{"version":3,"sources":["components/Navbar/navbarelements.js","components/Navbar/index.js","components/MusicPlayer/index.js","pages/pageelements.js","pages/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Navbar1","styled","Navbar","NavbarBrand","Brand","toggleFullScreen","doc","window","document","docEl","documentElement","requestFullScreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","cancelFullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","call","Navi","expand","variant","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","onClick","options","audioLists","name","singer","cover","musicSrc","defaultPlayIndex","theme","bounds","quietUpdate","clearPriorAudioLists","autoPlayInitLoadPlayList","preload","glassBg","remember","remove","defaultPosition","right","bottom","defaultPlayMode","mode","once","autoPlay","toggleMode","showMiniModeCover","showMiniProcessBar","drag","seeked","showMediaSession","showProgressLoadBar","showPlay","showReload","showDownload","showPlayMode","showThemeSwitch","showLyric","showDestroy","extendsContent","defaultVolume","playModeShowTime","loadAudioErrorPlayNext","autoHiddenCover","spaceBar","responsive","mobileMediaQuery","MusicPlayer","Body","div","Home","Badge","pill","App","basename","process","path","exact","component","to","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c6d1c976.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Navbar } from 'react-bootstrap';\n\nexport const Navbar1 = styled(Navbar)`\n  background-color: #020001;\n  min-height: 70px;\n`;\n\nexport const NavbarBrand = styled(Navbar.Brand)`\n  font-family: 'Nerko One';\n`;\n\nexport const toggleFullScreen = () => {\n    var doc = window.document;\n    var docEl = doc.documentElement;\n  \n    var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;\n    var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;\n  \n    if(!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {\n      requestFullScreen.call(docEl);\n    }\n    else {\n      cancelFullScreen.call(doc);\n    }\n}","import React from 'react';\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button} from 'react-bootstrap';\nimport { Navbar1, NavbarBrand, toggleFullScreen } from './navbarelements';\n\nconst Navi = () => {\n    return (\n        <div>\n            <Navbar1 expand=\"md\" variant=\"dark\">\n                <NavbarBrand href=\"/\">Youtube Music Pro</NavbarBrand>\n                <Navbar1.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar1.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/\">Home</Nav.Link>\n                    <Nav.Link href=\"link\">Link</Nav.Link>\n                    <Nav.Link href=\"github\">GitHub</Nav.Link>\n                    <Nav.Link onClick={toggleFullScreen}>F</Nav.Link>\n                    </Nav>\n                </Navbar1.Collapse>\n            </Navbar1>\n        </div>\n    )\n}\n\nexport default Navi\n","import React from 'react'\nimport ReactJkMusicPlayer from 'react-jinke-music-player'\n\nconst audioList1 = [\n    {\n        name: 'Khalouni N3ich',\n        singer: 'Najwa Farouk (نجوة فاروق)',\n        cover:\n          'https://i.ytimg.com/vi_webp/Srt8QReWCLM/maxresdefault.webp',\n        musicSrc:\n          'https://youtube-music-pro.herokuapp.com/assets/Srt8QReWCLM.webm',\n        // support async fetch music src. eg.\n        // musicSrc: async () => {\n        //   return await fetch('/api')\n        // },\n    },\n    // {\n    //     name: 'Despacito',\n    //     singer: 'Luis Fonsi',\n    //     cover:\n    //       'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\n    //     musicSrc:\n    //       'http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3',\n    // },\n]\n\nconst options = {\n    audioLists: audioList1,\n    defaultPlayIndex: 0,\n    theme: 'dark',\n    bounds: 'body',\n    quietUpdate: true,\n    clearPriorAudioLists: false,\n    autoPlayInitLoadPlayList: true,\n    preload: true,\n    glassBg: false,\n    remember: false,\n    remove: true,\n    defaultPosition: {\n        right: 50,\n        bottom: 70,\n    },\n    defaultPlayMode: 'order',\n    mode: 'mini',\n    once: false,\n    autoPlay: true,\n    toggleMode: true,\n    showMiniModeCover: true,\n    showMiniProcessBar: false,\n    drag: false,\n    seeked: true,\n    showMediaSession: true,\n    showProgressLoadBar: true,\n    showPlay: true,\n    showReload: true,\n    showDownload: false,\n    showPlayMode: true,\n    showThemeSwitch: false,\n    showLyric: false,\n    showDestroy: false,\n    extendsContent: null,\n    defaultVolume: 1,\n    playModeShowTime: 600,\n    loadAudioErrorPlayNext: true,\n    autoHiddenCover: true,\n    spaceBar: true,\n    responsive: true,\n    mobileMediaQuery: '(max-width: 1024px)'\n}\n\nconst MusicPlayer = () => {\n    return (\n        <div>\n            <ReactJkMusicPlayer {...options} />            \n        </div>\n    )\n}\n\nexport default MusicPlayer\n","import styled from 'styled-components';\n\nexport const Body = styled.div`\n    min-height: 90vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n    font-family: 'Nerko One';\n`;\n","import React from 'react'\nimport { Badge } from 'react-bootstrap'\nimport MusicPlayer from '../components/MusicPlayer'\nimport { Body } from './pageelements'\n\nconst Home = () => {\n    return (\n        <Body className='index-body'>\n            <Badge pill variant=\"warning\"><h1>Youtube Music Pro</h1></Badge>\n            <MusicPlayer showMediaSession />\n        </Body>\n    )\n}\n\nexport default Home\n","import './App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport {default as Navbar} from './components/Navbar';\nimport Home from './pages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Router basename={process.env.PUBLIC_URL}>\n      <Navbar />\n      <Switch>\n        <Route path='/' exact component={Home} />\n        <Redirect path='*' to='/' />\n      </Switch>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-jinke-music-player/assets/index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}