{"version":3,"sources":["components/Navbar/navbarelements.js","components/Navbar/index.js","components/MusicPlayer/index.js","api/proapi.js","api/ultimateapi.js","pages/pageelements.js","pages/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Navbar1","styled","Navbar","NavbarBrand","Brand","Copyright","Nav","Link","toggleFullScreen","doc","window","document","docEl","documentElement","requestFullScreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","cancelFullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","call","Navi","expand","variant","as","to","Toggle","aria-controls","Collapse","id","className","href","onClick","ReactJkMusicPlayer","React","lazy","MusicPlayer","data","options","audioLists","name","singer","cover","musicSrc","defaultPlayIndex","theme","bounds","quietUpdate","clearPriorAudioLists","autoPlayInitLoadPlayList","preload","glassBg","remember","remove","defaultPosition","right","bottom","defaultPlayMode","mode","once","autoPlay","toggleMode","showMiniModeCover","showMiniProcessBar","drag","seeked","showMediaSession","showProgressLoadBar","showPlay","showReload","showDownload","showPlayMode","showThemeSwitch","showLyric","showDestroy","extendsContent","defaultVolume","playModeShowTime","loadAudioErrorPlayNext","autoHiddenCover","spaceBar","responsive","mobileMediaQuery","Suspense","fallback","ProApi","songName","dn","a","axios","get","response","Ultimateapi","props","state","status","songname","artist","thumbnail","songurl","query_name","this","setState","Component","Body","div","Neon","Home","loading","value","song","sload","handleChange","bind","onSubmit","sleep","ms","Promise","resolve","setTimeout","event","target","preventDefault","sloadfn","Form","InputGroup","Prepend","Text","Control","size","type","placeholder","onChange","autoFocus","App","basename","process","path","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","origin","addEventListener","fetch","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.91b2d4ae.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Navbar } from 'react-bootstrap';\nimport {Nav} from 'react-bootstrap';\n\nexport const Navbar1 = styled(Navbar)`\n  // background-color: #020001;\n  background: linear-gradient(rgba(0, 0, 0, 0.95),rgba(100, 100, 100, 0.0));\n  min-height: 70px;\n`;\n\nexport const NavbarBrand = styled(Navbar.Brand)`\n  color: white;\n  font-size: 20px;\n  padding-right: 1rem;\n  // font-weight: bold;\n  text-decoration: none;\n  font-family: 'Nerko One';\n\n  &:hover {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport const Copyright = styled(Nav.Link)`\n  color: white;\n  &:hover {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport const toggleFullScreen = () => {\n    var doc = window.document;\n    var docEl = doc.documentElement;\n  \n    var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;\n    var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;\n  \n    if(!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {\n      requestFullScreen.call(docEl);\n    }\n    else {\n      cancelFullScreen.call(doc);\n    }\n}","import React from 'react';\nimport {Link} from 'react-router-dom'\nimport {Nav} from 'react-bootstrap';\nimport { Navbar1, NavbarBrand, toggleFullScreen, Copyright } from './navbarelements';\n\nconst Navi = () => {\n    return (\n        <div>\n            <Navbar1 expand=\"md\" variant=\"dark\">\n                <NavbarBrand as={Link} to=\"/\">Youtube Music Pro</NavbarBrand>\n                {/* <NavbarBrand href=\"/\">Youtube Music Pro</NavbarBrand> */}\n                <Navbar1.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar1.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                    {/* <Nav.Link as={Link} to=\"Legendof17\">Legendof17</Nav.Link> */}\n                    <Nav.Link href={\"https://github.com/legendof17\"}>Legendof17</Nav.Link>\n                    {/* <Nav.Link as={Link} to=\"github\">GitHub</Nav.Link> */}\n                    <Nav.Link href={\"https://github.com/legendof17/youtube-music-pro\"}>GitHub</Nav.Link>\n                    {/* <Nav.Link onClick={toggleFullScreen}>© JASM 2020</Nav.Link> */}\n                    <Nav.Link as={Link} to=\"/\">Features</Nav.Link>\n                    </Nav>\n                    <Copyright onClick={toggleFullScreen}>© TOP BEAST 2021</Copyright>\n                </Navbar1.Collapse>\n            </Navbar1>\n        </div>\n    )\n}\n\nexport default Navi\n","import React from 'react'\n// import ReactJkMusicPlayer from 'react-jinke-music-player'\n\nconst ReactJkMusicPlayer = React.lazy(() => import('react-jinke-music-player'))\n\nconst MusicPlayer = (data) => {\n    // console.log(data)\n    const audioList1 = [\n        {\n            name: data['title'],\n            singer: data['artist'],\n            cover: data['thumbnail'],\n            musicSrc: data['songurl'],\n            // support async fetch music src. eg.\n            // musicSrc: async () => {\n            //   return await fetch('/api')\n            // },\n        },\n        // {\n        //     name: 'Despacito',\n        //     singer: 'Luis Fonsi',\n        //     cover:\n        //       'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\n        //     musicSrc:\n        //       'http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3',\n        // },\n    ]\n    \n    const options = {\n        audioLists: audioList1,\n        defaultPlayIndex: 0,\n        theme: 'dark',\n        bounds: 'body',\n        quietUpdate: true,\n        clearPriorAudioLists: false,\n        autoPlayInitLoadPlayList: true,\n        preload: true,\n        glassBg: false,\n        remember: false,\n        remove: true,\n        defaultPosition: {\n            right: 50,\n            bottom: 70,\n        },\n        defaultPlayMode: 'order',\n        mode: 'full',\n        once: false,\n        autoPlay: true,\n        toggleMode: true,\n        showMiniModeCover: true,\n        showMiniProcessBar: false,\n        drag: false,\n        seeked: true,\n        showMediaSession: true,\n        showProgressLoadBar: true,\n        showPlay: true,\n        showReload: true,\n        showDownload: false,\n        showPlayMode: true,\n        showThemeSwitch: false,\n        showLyric: false,\n        showDestroy: false,\n        extendsContent: null,\n        defaultVolume: 1,\n        playModeShowTime: 600,\n        loadAudioErrorPlayNext: true,\n        autoHiddenCover: true,\n        spaceBar: true,\n        responsive: true,\n        mobileMediaQuery: '(max-width: 1024px)'\n    }\n    return (\n        <div>\n            <React.Suspense fallback={<div>Loading...</div>}>\n                <ReactJkMusicPlayer {...options} />\n            </React.Suspense>\n        </div>\n    )\n}\n\nexport default MusicPlayer\n","import axios from 'axios'\n\nexport default async function ProApi(songName,dn) {\n    // const ownedproxy = 'https://ntop-cors.herokuapp.com/'\n    // let response = await axios.get(ownedproxy+'https://youtube-music-pro.herokuapp.com/proapi?name='+songName+'&dn='+dn)\n    const apiurl = 'https://youtube-music-pro.herokuapp.com/proapi?name='\n    let response = await axios.get(apiurl+songName+'&dn='+dn)\n    // console.log(response['data'])\n    return response['data']\n}\n","import React from 'react'\nimport MusicPlayer from '../components/MusicPlayer';\n// import Assetfinder from './assetfinder';\n// import Infoextract from './infoextract';\n// import Nametoid from './nametoid';\nimport ProApi from './proapi';\n// import Songstatusfixer from './songstatusfixer';\n\nexport default class Ultimateapi extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: 0,\n            id: null,\n            songname: null,\n            artist: null,\n            thumbnail: null,\n            songurl: null,\n        }\n        this.query_name = props.name;\n    }\n\n    async initrun(name) {\n        // let id = await Nametoid(name)\n        // let data = await Infoextract(id)\n        // will enable these advance functions on upcoming versions\n        // data['url'] = await Songstatusfixer(data['url'],id)\n        // this.setState({status: await Assetfinder(data['url'])})\n        // return data\n    }\n\n    async componentDidMount() {\n        const data = await ProApi(this.query_name+' official song',1)\n        // const data = await this.initrun(this.query_name)\n        this.setState({\n            songname: data['title'],\n            artist: data['artist'],\n            thumbnail: data['thumbnail'],\n            songurl: data['url'],\n            id: data['id'],\n        })\n        // console.log(data)\n    }\n\n    render() {\n        return (\n            // <div>\n            //     <h1>Hello</h1>\n            //     <h1>Status: {this.state.status}</h1>\n            //     <h1>ID: {this.state.id}</h1>\n            //     <h1>SongName: {this.state.songname}</h1>\n            //     <h1>Artist: {this.state.artist}</h1>\n            //     <h1>Thumbnail: {this.state.thumbnail}</h1>\n            //     <h1>Songurl: {this.state.songurl}</h1>\n            // </div>\n            <div>\n                {this.state.songname ? (\n                    <MusicPlayer {...this.state} />\n                ) : (\n                    <h1>loading</h1>\n                )}\n            </div>\n        )\n    }\n}","import styled from 'styled-components';\n\nexport const Body = styled.div`\n    min-height: 90vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n    font-family: 'Nerko One';\n`;\n","import React, { Suspense, Component }from 'react'\nimport { Form, InputGroup } from 'react-bootstrap'\nimport Ultimateapi from '../api/ultimateapi'\n// import Neon from '../components/Home/NeonIntro'\nimport { Body } from './pageelements'\n\nconst Neon = React.lazy(() => import('../components/Home/NeonIntro'))\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            value: '',\n            song: false,\n            sload: false\n        }\n\n        this.songName = this.state.song\n\n        this.handleChange = this.handleChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        // await this.sleep(13000)\n        await this.sleep(5000)\n        this.setState({loading: false})\n    }\n\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    handleChange(event) {\n        // console.log(event.target.value)\n        this.setState({value: event.target.value});\n    }\n\n    async onSubmit(event) {\n        event.preventDefault();\n        this.songName = this.state.value\n        this.setState({song: true})\n        this.setState({sload: false})\n        await this.sleep(1000)\n        this.setState({song: false})\n        this.sloadfn(event)\n    }\n\n    async sloadfn() {\n        this.setState({song: true})\n        this.setState({value: ''})\n        this.setState({sload: true})\n    }\n \n    render() {\n        return (\n            <Body className='index-body'>\n                {this.state.loading ? (\n                    // <Intro />\n                    // <Neon />\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <Neon />\n                    </Suspense>\n                ) : (\n                this.state.song ? (\n                    <div>\n                        {this.state.sload ? (\n                            <Form onSubmit={this.onSubmit}>\n                                <InputGroup>\n                                    <InputGroup.Prepend>\n                                        <InputGroup.Text id=\"basic-addon1\">♫</InputGroup.Text>\n                                    </InputGroup.Prepend>\n                                    <Form.Control size=\"lg\" type=\"text\" placeholder=\"Enter Song Name\" value={this.state.value} onChange={this.handleChange} />\n                                </InputGroup>\n                            </Form>\n                        ) : (null)}\n                        <Ultimateapi name={this.songName} />\n                    </div>\n                ) : (\n                    <Form onSubmit={this.onSubmit}>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text id=\"basic-addon1\">♫</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control autoFocus size=\"lg\" type=\"text\" placeholder=\"Enter Song Name\" value={this.state.value} onChange={this.handleChange} />\n                        </InputGroup>\n                    </Form>\n                ))}\n            </Body>\n        )\n    }\n}","import './App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport {default as Navbar} from './components/Navbar';\nimport Home from './pages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Router basename={process.env.PUBLIC_URL}>\n      <Navbar />\n      <Switch>\n        <Route path='/' exact component={Home} />\n        {/* <Route path='/Legendof17' exact render={() => (window.location = \"https://github.com/legendof17\")} /> */}\n        {/* <Route path='/github' exact render={() => (window.location = \"https://github.com/legendof17/youtube-music-pro\")} /> */}\n        <Redirect path='*' to='/' />\n      </Switch>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-jinke-music-player/assets/index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}